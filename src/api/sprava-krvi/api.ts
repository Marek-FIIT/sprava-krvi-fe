/* tslint:disable */
/* eslint-disable */
/**
 * Blood management API
 * Management of blood donors and blood units
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xsykoram3@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Contains the data being stored, regaring a single blood donor
 * @export
 * @interface Donor
 */
export interface Donor {
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'birth_number': string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'last_name': string;
    /**
     * for broad location
     * @type {string}
     * @memberof Donor
     */
    'postal_code': string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'blood_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'blood_rh'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Donor
     */
    'eligible': boolean;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'last_donation'?: string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'phone_number'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Donor
     */
    'diseases'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Donor
     */
    'medications'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Donor
     */
    'substances'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    'updated_at'?: string;
}
/**
 * Contains simplified data, regaring a single blood donor
 * @export
 * @interface DonorListEntry
 */
export interface DonorListEntry {
    /**
     * 
     * @type {string}
     * @memberof DonorListEntry
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DonorListEntry
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof DonorListEntry
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof DonorListEntry
     */
    'blood_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof DonorListEntry
     */
    'blood_rh'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DonorListEntry
     */
    'eligible': boolean;
    /**
     * 
     * @type {string}
     * @memberof DonorListEntry
     */
    'last_donation'?: string;
}
/**
 * Contains the data being stored, regaring a single blood unit
 * @export
 * @interface Unit
 */
export interface Unit {
    /**
     * 
     * @type {string}
     * @memberof Unit
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Unit
     */
    'donor_id': string;
    /**
     * common for all units from one donation
     * @type {string}
     * @memberof Unit
     */
    'donation_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Unit
     */
    'blood_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Unit
     */
    'blood_rh'?: string;
    /**
     * 
     * @type {string}
     * @memberof Unit
     */
    'status'?: string;
    /**
     * for broad location
     * @type {string}
     * @memberof Unit
     */
    'location': string;
    /**
     * 
     * @type {UnitContents}
     * @memberof Unit
     */
    'contents'?: UnitContents;
    /**
     * 
     * @type {boolean}
     * @memberof Unit
     */
    'frozen'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Unit
     */
    'diseases'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Unit
     */
    'expiration'?: string;
    /**
     * 
     * @type {string}
     * @memberof Unit
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Unit
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface UnitContents
 */
export interface UnitContents {
    /**
     * 
     * @type {number}
     * @memberof UnitContents
     */
    'hemoglobin'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UnitContents
     */
    'erythrocytes'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitContents
     */
    'leukocytes'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitContents
     */
    'platelets'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitContents
     */
    'plasma'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitContents
     */
    'additional'?: Array<string>;
}
/**
 * Contains simplified blood unit data
 * @export
 * @interface UnitListEntry
 */
export interface UnitListEntry {
    /**
     * 
     * @type {string}
     * @memberof UnitListEntry
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UnitListEntry
     */
    'blood_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitListEntry
     */
    'blood_rh'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitListEntry
     */
    'status': string;
    /**
     * for broad location
     * @type {string}
     * @memberof UnitListEntry
     */
    'location': string;
}

/**
 * DonorsApi - axios parameter creator
 * @export
 */
export const DonorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new donor based on the request payload
         * @summary Creates new donor
         * @param {Donor} donor Donor data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDonor: async (donor: Donor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donor' is not null or undefined
            assertParamExists('createDonor', 'donor', donor)
            const localVarPath = `/donors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donor, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific blood donor.
         * @summary Deletes the specific donor
         * @param {string} donorId Id of the desired donor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDonor: async (donorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('deleteDonor', 'donorId', donorId)
            const localVarPath = `/donors/{donorId}`
                .replace(`{${"donorId"}}`, encodeURIComponent(String(donorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the detailed information of the desired donor based on the donor id
         * @summary Provides the detail of a donor
         * @param {string} donorId Id of the desired donor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonor: async (donorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('getDonor', 'donorId', donorId)
            const localVarPath = `/donors/{donorId}`
                .replace(`{${"donorId"}}`, encodeURIComponent(String(donorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the donors with the required blood type and RH factor, or all registered donors if no parameters were supplied
         * @summary Provides the list of blood donors
         * @param {'AB' | 'A' | 'B' | '0'} [bloodType] If needed, provide a specific blood type
         * @param {'+' | '-'} [bloodRh] If needed, provide a specific blood RH factor
         * @param {boolean} [eligible] filter only eligible donors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonors: async (bloodType?: 'AB' | 'A' | 'B' | '0', bloodRh?: '+' | '-', eligible?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/donors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bloodType !== undefined) {
                localVarQueryParameter['bloodType'] = bloodType;
            }

            if (bloodRh !== undefined) {
                localVarQueryParameter['bloodRh'] = bloodRh;
            }

            if (eligible !== undefined) {
                localVarQueryParameter['eligible'] = eligible;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the donor specified by the donor id based on the request payload
         * @summary updates the data of the specified donor
         * @param {string} donorId Id of the desired donor
         * @param {Donor} donor Donor data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDonor: async (donorId: string, donor: Donor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('updateDonor', 'donorId', donorId)
            // verify required parameter 'donor' is not null or undefined
            assertParamExists('updateDonor', 'donor', donor)
            const localVarPath = `/donors/{donorId}`
                .replace(`{${"donorId"}}`, encodeURIComponent(String(donorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donor, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DonorsApi - functional programming interface
 * @export
 */
export const DonorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DonorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new donor based on the request payload
         * @summary Creates new donor
         * @param {Donor} donor Donor data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDonor(donor: Donor, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Donor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDonor(donor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific blood donor.
         * @summary Deletes the specific donor
         * @param {string} donorId Id of the desired donor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDonor(donorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDonor(donorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the detailed information of the desired donor based on the donor id
         * @summary Provides the detail of a donor
         * @param {string} donorId Id of the desired donor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDonor(donorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Donor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDonor(donorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the donors with the required blood type and RH factor, or all registered donors if no parameters were supplied
         * @summary Provides the list of blood donors
         * @param {'AB' | 'A' | 'B' | '0'} [bloodType] If needed, provide a specific blood type
         * @param {'+' | '-'} [bloodRh] If needed, provide a specific blood RH factor
         * @param {boolean} [eligible] filter only eligible donors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDonors(bloodType?: 'AB' | 'A' | 'B' | '0', bloodRh?: '+' | '-', eligible?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DonorListEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDonors(bloodType, bloodRh, eligible, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the donor specified by the donor id based on the request payload
         * @summary updates the data of the specified donor
         * @param {string} donorId Id of the desired donor
         * @param {Donor} donor Donor data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDonor(donorId: string, donor: Donor, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Donor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDonor(donorId, donor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DonorsApi - factory interface
 * @export
 */
export const DonorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DonorsApiFp(configuration)
    return {
        /**
         * Creates a new donor based on the request payload
         * @summary Creates new donor
         * @param {Donor} donor Donor data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDonor(donor: Donor, options?: any): AxiosPromise<Donor> {
            return localVarFp.createDonor(donor, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific blood donor.
         * @summary Deletes the specific donor
         * @param {string} donorId Id of the desired donor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDonor(donorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDonor(donorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the detailed information of the desired donor based on the donor id
         * @summary Provides the detail of a donor
         * @param {string} donorId Id of the desired donor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonor(donorId: string, options?: any): AxiosPromise<Donor> {
            return localVarFp.getDonor(donorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the donors with the required blood type and RH factor, or all registered donors if no parameters were supplied
         * @summary Provides the list of blood donors
         * @param {'AB' | 'A' | 'B' | '0'} [bloodType] If needed, provide a specific blood type
         * @param {'+' | '-'} [bloodRh] If needed, provide a specific blood RH factor
         * @param {boolean} [eligible] filter only eligible donors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonors(bloodType?: 'AB' | 'A' | 'B' | '0', bloodRh?: '+' | '-', eligible?: boolean, options?: any): AxiosPromise<Array<DonorListEntry>> {
            return localVarFp.getDonors(bloodType, bloodRh, eligible, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the donor specified by the donor id based on the request payload
         * @summary updates the data of the specified donor
         * @param {string} donorId Id of the desired donor
         * @param {Donor} donor Donor data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDonor(donorId: string, donor: Donor, options?: any): AxiosPromise<Donor> {
            return localVarFp.updateDonor(donorId, donor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DonorsApi - interface
 * @export
 * @interface DonorsApi
 */
export interface DonorsApiInterface {
    /**
     * Creates a new donor based on the request payload
     * @summary Creates new donor
     * @param {Donor} donor Donor data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApiInterface
     */
    createDonor(donor: Donor, options?: AxiosRequestConfig): AxiosPromise<Donor>;

    /**
     * Use this method to delete the specific blood donor.
     * @summary Deletes the specific donor
     * @param {string} donorId Id of the desired donor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApiInterface
     */
    deleteDonor(donorId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Returns the detailed information of the desired donor based on the donor id
     * @summary Provides the detail of a donor
     * @param {string} donorId Id of the desired donor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApiInterface
     */
    getDonor(donorId: string, options?: AxiosRequestConfig): AxiosPromise<Donor>;

    /**
     * Returns the donors with the required blood type and RH factor, or all registered donors if no parameters were supplied
     * @summary Provides the list of blood donors
     * @param {'AB' | 'A' | 'B' | '0'} [bloodType] If needed, provide a specific blood type
     * @param {'+' | '-'} [bloodRh] If needed, provide a specific blood RH factor
     * @param {boolean} [eligible] filter only eligible donors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApiInterface
     */
    getDonors(bloodType?: 'AB' | 'A' | 'B' | '0', bloodRh?: '+' | '-', eligible?: boolean, options?: AxiosRequestConfig): AxiosPromise<Array<DonorListEntry>>;

    /**
     * Updates the donor specified by the donor id based on the request payload
     * @summary updates the data of the specified donor
     * @param {string} donorId Id of the desired donor
     * @param {Donor} donor Donor data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApiInterface
     */
    updateDonor(donorId: string, donor: Donor, options?: AxiosRequestConfig): AxiosPromise<Donor>;

}

/**
 * DonorsApi - object-oriented interface
 * @export
 * @class DonorsApi
 * @extends {BaseAPI}
 */
export class DonorsApi extends BaseAPI implements DonorsApiInterface {
    /**
     * Creates a new donor based on the request payload
     * @summary Creates new donor
     * @param {Donor} donor Donor data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApi
     */
    public createDonor(donor: Donor, options?: AxiosRequestConfig) {
        return DonorsApiFp(this.configuration).createDonor(donor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific blood donor.
     * @summary Deletes the specific donor
     * @param {string} donorId Id of the desired donor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApi
     */
    public deleteDonor(donorId: string, options?: AxiosRequestConfig) {
        return DonorsApiFp(this.configuration).deleteDonor(donorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the detailed information of the desired donor based on the donor id
     * @summary Provides the detail of a donor
     * @param {string} donorId Id of the desired donor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApi
     */
    public getDonor(donorId: string, options?: AxiosRequestConfig) {
        return DonorsApiFp(this.configuration).getDonor(donorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the donors with the required blood type and RH factor, or all registered donors if no parameters were supplied
     * @summary Provides the list of blood donors
     * @param {'AB' | 'A' | 'B' | '0'} [bloodType] If needed, provide a specific blood type
     * @param {'+' | '-'} [bloodRh] If needed, provide a specific blood RH factor
     * @param {boolean} [eligible] filter only eligible donors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApi
     */
    public getDonors(bloodType?: 'AB' | 'A' | 'B' | '0', bloodRh?: '+' | '-', eligible?: boolean, options?: AxiosRequestConfig) {
        return DonorsApiFp(this.configuration).getDonors(bloodType, bloodRh, eligible, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the donor specified by the donor id based on the request payload
     * @summary updates the data of the specified donor
     * @param {string} donorId Id of the desired donor
     * @param {Donor} donor Donor data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApi
     */
    public updateDonor(donorId: string, donor: Donor, options?: AxiosRequestConfig) {
        return DonorsApiFp(this.configuration).updateDonor(donorId, donor, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UnitsApi - axios parameter creator
 * @export
 */
export const UnitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates new units based on the request payload containing the donor id. The amount of units is specified by query parameter.
         * @summary Creates new units
         * @param {number} amount Provide a the amount of units donated
         * @param {Unit} unit Unit data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUnits: async (amount: number, unit: Unit, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createUnits', 'amount', amount)
            // verify required parameter 'unit' is not null or undefined
            assertParamExists('createUnits', 'unit', unit)
            const localVarPath = `/units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific blood unit.
         * @summary Deletes the specific unit
         * @param {string} unitId Id of the desired unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnit: async (unitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unitId' is not null or undefined
            assertParamExists('deleteUnit', 'unitId', unitId)
            const localVarPath = `/units/{unitId}`
                .replace(`{${"unitId"}}`, encodeURIComponent(String(unitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the detailed information of the desired unit based on the unit id
         * @summary Provides the detail of the unit
         * @param {string} unitId Id of the desired unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnit: async (unitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unitId' is not null or undefined
            assertParamExists('getUnit', 'unitId', unitId)
            const localVarPath = `/units/{unitId}`
                .replace(`{${"unitId"}}`, encodeURIComponent(String(unitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the units with the required blood type and RH factor, or all units if no parameters were supplied
         * @summary Provides the list of blood units
         * @param {'AB' | 'A' | 'B' | '0'} [bloodType] If needed, provide a specific blood type
         * @param {'+' | '-'} [bloodRh] If needed, provide a specific blood RH factor
         * @param {'available' | 'reserved' | 'unprocessed' | 'suspended' | 'contaminated' | 'expired'} [status] filter based on status
         * @param {string} [location] filter by postal code
         * @param {boolean} [erythrocytes] filter by erythrocytes presence
         * @param {boolean} [leukocytes] filter by leukocytes presence
         * @param {boolean} [platelets] filter by platelets presence
         * @param {boolean} [plasma] filter by plasma presence
         * @param {boolean} [frozen] filter by whether the unit is frozen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnits: async (bloodType?: 'AB' | 'A' | 'B' | '0', bloodRh?: '+' | '-', status?: 'available' | 'reserved' | 'unprocessed' | 'suspended' | 'contaminated' | 'expired', location?: string, erythrocytes?: boolean, leukocytes?: boolean, platelets?: boolean, plasma?: boolean, frozen?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bloodType !== undefined) {
                localVarQueryParameter['bloodType'] = bloodType;
            }

            if (bloodRh !== undefined) {
                localVarQueryParameter['bloodRh'] = bloodRh;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (erythrocytes !== undefined) {
                localVarQueryParameter['erythrocytes'] = erythrocytes;
            }

            if (leukocytes !== undefined) {
                localVarQueryParameter['leukocytes'] = leukocytes;
            }

            if (platelets !== undefined) {
                localVarQueryParameter['platelets'] = platelets;
            }

            if (plasma !== undefined) {
                localVarQueryParameter['plasma'] = plasma;
            }

            if (frozen !== undefined) {
                localVarQueryParameter['frozen'] = frozen;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the unitt specified by the unit id based on the request payload
         * @summary updates the data of the specified unit
         * @param {string} unitId Id of the desired unit
         * @param {Unit} unit Unit data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnit: async (unitId: string, unit: Unit, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unitId' is not null or undefined
            assertParamExists('updateUnit', 'unitId', unitId)
            // verify required parameter 'unit' is not null or undefined
            assertParamExists('updateUnit', 'unit', unit)
            const localVarPath = `/units/{unitId}`
                .replace(`{${"unitId"}}`, encodeURIComponent(String(unitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnitsApi - functional programming interface
 * @export
 */
export const UnitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnitsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates new units based on the request payload containing the donor id. The amount of units is specified by query parameter.
         * @summary Creates new units
         * @param {number} amount Provide a the amount of units donated
         * @param {Unit} unit Unit data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUnits(amount: number, unit: Unit, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Unit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUnits(amount, unit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific blood unit.
         * @summary Deletes the specific unit
         * @param {string} unitId Id of the desired unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUnit(unitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUnit(unitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the detailed information of the desired unit based on the unit id
         * @summary Provides the detail of the unit
         * @param {string} unitId Id of the desired unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnit(unitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Unit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnit(unitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the units with the required blood type and RH factor, or all units if no parameters were supplied
         * @summary Provides the list of blood units
         * @param {'AB' | 'A' | 'B' | '0'} [bloodType] If needed, provide a specific blood type
         * @param {'+' | '-'} [bloodRh] If needed, provide a specific blood RH factor
         * @param {'available' | 'reserved' | 'unprocessed' | 'suspended' | 'contaminated' | 'expired'} [status] filter based on status
         * @param {string} [location] filter by postal code
         * @param {boolean} [erythrocytes] filter by erythrocytes presence
         * @param {boolean} [leukocytes] filter by leukocytes presence
         * @param {boolean} [platelets] filter by platelets presence
         * @param {boolean} [plasma] filter by plasma presence
         * @param {boolean} [frozen] filter by whether the unit is frozen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnits(bloodType?: 'AB' | 'A' | 'B' | '0', bloodRh?: '+' | '-', status?: 'available' | 'reserved' | 'unprocessed' | 'suspended' | 'contaminated' | 'expired', location?: string, erythrocytes?: boolean, leukocytes?: boolean, platelets?: boolean, plasma?: boolean, frozen?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UnitListEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnits(bloodType, bloodRh, status, location, erythrocytes, leukocytes, platelets, plasma, frozen, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the unitt specified by the unit id based on the request payload
         * @summary updates the data of the specified unit
         * @param {string} unitId Id of the desired unit
         * @param {Unit} unit Unit data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUnit(unitId: string, unit: Unit, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Unit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUnit(unitId, unit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnitsApi - factory interface
 * @export
 */
export const UnitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnitsApiFp(configuration)
    return {
        /**
         * Creates new units based on the request payload containing the donor id. The amount of units is specified by query parameter.
         * @summary Creates new units
         * @param {number} amount Provide a the amount of units donated
         * @param {Unit} unit Unit data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUnits(amount: number, unit: Unit, options?: any): AxiosPromise<Array<Unit>> {
            return localVarFp.createUnits(amount, unit, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific blood unit.
         * @summary Deletes the specific unit
         * @param {string} unitId Id of the desired unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnit(unitId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUnit(unitId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the detailed information of the desired unit based on the unit id
         * @summary Provides the detail of the unit
         * @param {string} unitId Id of the desired unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnit(unitId: string, options?: any): AxiosPromise<Unit> {
            return localVarFp.getUnit(unitId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the units with the required blood type and RH factor, or all units if no parameters were supplied
         * @summary Provides the list of blood units
         * @param {'AB' | 'A' | 'B' | '0'} [bloodType] If needed, provide a specific blood type
         * @param {'+' | '-'} [bloodRh] If needed, provide a specific blood RH factor
         * @param {'available' | 'reserved' | 'unprocessed' | 'suspended' | 'contaminated' | 'expired'} [status] filter based on status
         * @param {string} [location] filter by postal code
         * @param {boolean} [erythrocytes] filter by erythrocytes presence
         * @param {boolean} [leukocytes] filter by leukocytes presence
         * @param {boolean} [platelets] filter by platelets presence
         * @param {boolean} [plasma] filter by plasma presence
         * @param {boolean} [frozen] filter by whether the unit is frozen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnits(bloodType?: 'AB' | 'A' | 'B' | '0', bloodRh?: '+' | '-', status?: 'available' | 'reserved' | 'unprocessed' | 'suspended' | 'contaminated' | 'expired', location?: string, erythrocytes?: boolean, leukocytes?: boolean, platelets?: boolean, plasma?: boolean, frozen?: boolean, options?: any): AxiosPromise<Array<UnitListEntry>> {
            return localVarFp.getUnits(bloodType, bloodRh, status, location, erythrocytes, leukocytes, platelets, plasma, frozen, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the unitt specified by the unit id based on the request payload
         * @summary updates the data of the specified unit
         * @param {string} unitId Id of the desired unit
         * @param {Unit} unit Unit data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnit(unitId: string, unit: Unit, options?: any): AxiosPromise<Unit> {
            return localVarFp.updateUnit(unitId, unit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UnitsApi - interface
 * @export
 * @interface UnitsApi
 */
export interface UnitsApiInterface {
    /**
     * Creates new units based on the request payload containing the donor id. The amount of units is specified by query parameter.
     * @summary Creates new units
     * @param {number} amount Provide a the amount of units donated
     * @param {Unit} unit Unit data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApiInterface
     */
    createUnits(amount: number, unit: Unit, options?: AxiosRequestConfig): AxiosPromise<Array<Unit>>;

    /**
     * Use this method to delete the specific blood unit.
     * @summary Deletes the specific unit
     * @param {string} unitId Id of the desired unit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApiInterface
     */
    deleteUnit(unitId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Returns the detailed information of the desired unit based on the unit id
     * @summary Provides the detail of the unit
     * @param {string} unitId Id of the desired unit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApiInterface
     */
    getUnit(unitId: string, options?: AxiosRequestConfig): AxiosPromise<Unit>;

    /**
     * Returns the units with the required blood type and RH factor, or all units if no parameters were supplied
     * @summary Provides the list of blood units
     * @param {'AB' | 'A' | 'B' | '0'} [bloodType] If needed, provide a specific blood type
     * @param {'+' | '-'} [bloodRh] If needed, provide a specific blood RH factor
     * @param {'available' | 'reserved' | 'unprocessed' | 'suspended' | 'contaminated' | 'expired'} [status] filter based on status
     * @param {string} [location] filter by postal code
     * @param {boolean} [erythrocytes] filter by erythrocytes presence
     * @param {boolean} [leukocytes] filter by leukocytes presence
     * @param {boolean} [platelets] filter by platelets presence
     * @param {boolean} [plasma] filter by plasma presence
     * @param {boolean} [frozen] filter by whether the unit is frozen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApiInterface
     */
    getUnits(bloodType?: 'AB' | 'A' | 'B' | '0', bloodRh?: '+' | '-', status?: 'available' | 'reserved' | 'unprocessed' | 'suspended' | 'contaminated' | 'expired', location?: string, erythrocytes?: boolean, leukocytes?: boolean, platelets?: boolean, plasma?: boolean, frozen?: boolean, options?: AxiosRequestConfig): AxiosPromise<Array<UnitListEntry>>;

    /**
     * Updates the unitt specified by the unit id based on the request payload
     * @summary updates the data of the specified unit
     * @param {string} unitId Id of the desired unit
     * @param {Unit} unit Unit data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApiInterface
     */
    updateUnit(unitId: string, unit: Unit, options?: AxiosRequestConfig): AxiosPromise<Unit>;

}

/**
 * UnitsApi - object-oriented interface
 * @export
 * @class UnitsApi
 * @extends {BaseAPI}
 */
export class UnitsApi extends BaseAPI implements UnitsApiInterface {
    /**
     * Creates new units based on the request payload containing the donor id. The amount of units is specified by query parameter.
     * @summary Creates new units
     * @param {number} amount Provide a the amount of units donated
     * @param {Unit} unit Unit data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApi
     */
    public createUnits(amount: number, unit: Unit, options?: AxiosRequestConfig) {
        return UnitsApiFp(this.configuration).createUnits(amount, unit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific blood unit.
     * @summary Deletes the specific unit
     * @param {string} unitId Id of the desired unit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApi
     */
    public deleteUnit(unitId: string, options?: AxiosRequestConfig) {
        return UnitsApiFp(this.configuration).deleteUnit(unitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the detailed information of the desired unit based on the unit id
     * @summary Provides the detail of the unit
     * @param {string} unitId Id of the desired unit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApi
     */
    public getUnit(unitId: string, options?: AxiosRequestConfig) {
        return UnitsApiFp(this.configuration).getUnit(unitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the units with the required blood type and RH factor, or all units if no parameters were supplied
     * @summary Provides the list of blood units
     * @param {'AB' | 'A' | 'B' | '0'} [bloodType] If needed, provide a specific blood type
     * @param {'+' | '-'} [bloodRh] If needed, provide a specific blood RH factor
     * @param {'available' | 'reserved' | 'unprocessed' | 'suspended' | 'contaminated' | 'expired'} [status] filter based on status
     * @param {string} [location] filter by postal code
     * @param {boolean} [erythrocytes] filter by erythrocytes presence
     * @param {boolean} [leukocytes] filter by leukocytes presence
     * @param {boolean} [platelets] filter by platelets presence
     * @param {boolean} [plasma] filter by plasma presence
     * @param {boolean} [frozen] filter by whether the unit is frozen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApi
     */
    public getUnits(bloodType?: 'AB' | 'A' | 'B' | '0', bloodRh?: '+' | '-', status?: 'available' | 'reserved' | 'unprocessed' | 'suspended' | 'contaminated' | 'expired', location?: string, erythrocytes?: boolean, leukocytes?: boolean, platelets?: boolean, plasma?: boolean, frozen?: boolean, options?: AxiosRequestConfig) {
        return UnitsApiFp(this.configuration).getUnits(bloodType, bloodRh, status, location, erythrocytes, leukocytes, platelets, plasma, frozen, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the unitt specified by the unit id based on the request payload
     * @summary updates the data of the specified unit
     * @param {string} unitId Id of the desired unit
     * @param {Unit} unit Unit data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApi
     */
    public updateUnit(unitId: string, unit: Unit, options?: AxiosRequestConfig) {
        return UnitsApiFp(this.configuration).updateUnit(unitId, unit, options).then((request) => request(this.axios, this.basePath));
    }
}


